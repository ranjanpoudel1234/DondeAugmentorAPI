// <auto-generated />
using System;
using Donde.Augmentor.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Donde.Augmentor.Infrastructure.Migrations
{
    [DbContext(typeof(DondeContext))]
    partial class DondeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.Audio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Extension");

                    b.Property<Guid>("FileId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MimeType");

                    b.Property<string>("Name");

                    b.Property<Guid>("OrganizationId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Audios");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.AugmentImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Extension");

                    b.Property<Guid>("FileId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MimeType");

                    b.Property<string>("Name");

                    b.Property<Guid>("OrganizationId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("AugmentImages");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.AugmentObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<Guid>("AugmentImageId");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("OrganizationId");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AugmentImageId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("AugmentObjects");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.AugmentObjectLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<Guid>("AugmentObjectId");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AugmentObjectId");

                    b.ToTable("AugmentObjectLocations");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.AugmentObjectMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<Guid?>("AudioId");

                    b.Property<Guid>("AugmentObjectId");

                    b.Property<Guid?>("AvatarId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MediaType");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<Guid?>("VideoId");

                    b.HasKey("Id");

                    b.HasIndex("AudioId");

                    b.HasIndex("AugmentObjectId");

                    b.HasIndex("AvatarId");

                    b.HasIndex("VideoId");

                    b.ToTable("AugmentObjectMedias");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.Avatar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("AvatarConfiguration")
                        .HasColumnType("jsonb");

                    b.Property<string>("Extension");

                    b.Property<Guid>("FileId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MimeType");

                    b.Property<string>("Name");

                    b.Property<Guid>("OrganizationId");

                    b.Property<string>("TextureFileName");

                    b.Property<string>("TextureFileUrl");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Avatars");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MiddleInitial");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Prefix");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Suffix");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.Metrics.AugmentObjectMediaVisitMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<Guid>("AugmentObjectId");

                    b.Property<Guid>("AugmentObjectMediaId");

                    b.Property<string>("DeviceId");

                    b.Property<string>("DeviceName");

                    b.Property<string>("DeviceUniqueId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AugmentObjectId");

                    b.HasIndex("AugmentObjectMediaId");

                    b.ToTable("AugmentObjectMediaVisitMetrics");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.Metrics.AugmentObjectVisitMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<Guid>("AugmentObjectId");

                    b.Property<string>("DeviceId");

                    b.Property<string>("DeviceName");

                    b.Property<string>("DeviceUniqueId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AugmentObjectId");

                    b.ToTable("AugmentObjectVisitMetrics");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("City");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LogoExtension");

                    b.Property<Guid>("LogoFileId");

                    b.Property<string>("LogoMimeType");

                    b.Property<string>("LogoName");

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.Property<string>("State");

                    b.Property<string>("StreetAddress1");

                    b.Property<string>("StreetAddress2");

                    b.Property<int>("Type");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.RolesAndPermissions.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Resource");

                    b.Property<int>("ResourceAction");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.RolesAndPermissions.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.RolesAndPermissions.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("PermissionId");

                    b.Property<Guid>("RoleId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.RolesAndPermissions.UserOrganization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("OrganizationId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOrganizations");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.RolesAndPermissions.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("RoleId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.Site", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("City");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Name");

                    b.Property<Guid>("OrganizationId");

                    b.Property<string>("ShortName");

                    b.Property<string>("State");

                    b.Property<string>("StreetAddress1");

                    b.Property<string>("StreetAddress2");

                    b.Property<int>("Type");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.Video", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Extension");

                    b.Property<Guid>("FileId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MimeType");

                    b.Property<string>("Name");

                    b.Property<Guid>("OrganizationId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.Audio", b =>
                {
                    b.HasOne("Donde.Augmentor.Core.Domain.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.AugmentImage", b =>
                {
                    b.HasOne("Donde.Augmentor.Core.Domain.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.AugmentObject", b =>
                {
                    b.HasOne("Donde.Augmentor.Core.Domain.Models.AugmentImage", "AugmentImage")
                        .WithMany()
                        .HasForeignKey("AugmentImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Donde.Augmentor.Core.Domain.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.AugmentObjectLocation", b =>
                {
                    b.HasOne("Donde.Augmentor.Core.Domain.Models.AugmentObject", "AugmentObject")
                        .WithMany("AugmentObjectLocations")
                        .HasForeignKey("AugmentObjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.AugmentObjectMedia", b =>
                {
                    b.HasOne("Donde.Augmentor.Core.Domain.Models.Audio", "Audio")
                        .WithMany()
                        .HasForeignKey("AudioId");

                    b.HasOne("Donde.Augmentor.Core.Domain.Models.AugmentObject", "AugmentObject")
                        .WithMany("AugmentObjectMedias")
                        .HasForeignKey("AugmentObjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Donde.Augmentor.Core.Domain.Models.Avatar", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.HasOne("Donde.Augmentor.Core.Domain.Models.Video", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.Avatar", b =>
                {
                    b.HasOne("Donde.Augmentor.Core.Domain.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.Metrics.AugmentObjectMediaVisitMetric", b =>
                {
                    b.HasOne("Donde.Augmentor.Core.Domain.Models.AugmentObject", "AugmentObject")
                        .WithMany()
                        .HasForeignKey("AugmentObjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Donde.Augmentor.Core.Domain.Models.AugmentObjectMedia", "AugmentObjectMedia")
                        .WithMany()
                        .HasForeignKey("AugmentObjectMediaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.Metrics.AugmentObjectVisitMetric", b =>
                {
                    b.HasOne("Donde.Augmentor.Core.Domain.Models.AugmentObject", "AugmentObject")
                        .WithMany()
                        .HasForeignKey("AugmentObjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.RolesAndPermissions.RolePermission", b =>
                {
                    b.HasOne("Donde.Augmentor.Core.Domain.Models.RolesAndPermissions.Permission", "Permission")
                        .WithMany("Roles")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Donde.Augmentor.Core.Domain.Models.RolesAndPermissions.Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.RolesAndPermissions.UserOrganization", b =>
                {
                    b.HasOne("Donde.Augmentor.Core.Domain.Models.Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Donde.Augmentor.Core.Domain.Models.Identity.User")
                        .WithMany("Organizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.RolesAndPermissions.UserRole", b =>
                {
                    b.HasOne("Donde.Augmentor.Core.Domain.Models.RolesAndPermissions.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Donde.Augmentor.Core.Domain.Models.Identity.User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.Site", b =>
                {
                    b.HasOne("Donde.Augmentor.Core.Domain.Models.Organization")
                        .WithMany("Sites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.Video", b =>
                {
                    b.HasOne("Donde.Augmentor.Core.Domain.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Donde.Augmentor.Core.Domain.Models.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Donde.Augmentor.Core.Domain.Models.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Donde.Augmentor.Core.Domain.Models.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Donde.Augmentor.Core.Domain.Models.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
