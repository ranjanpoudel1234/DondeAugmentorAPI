// <auto-generated />
using System;
using Donde.Augmentor.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Donde.Augmentor.Infrastructure.Migrations
{
    [DbContext(typeof(DondeContext))]
    [Migration("20200319124939_RenameIsActiveToIsDeleted")]
    partial class RenameIsActiveToIsDeleted
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.Audio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MimeType");

                    b.Property<string>("Name");

                    b.Property<Guid>("OrganizationId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.ToTable("Audios");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.AugmentImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MimeType");

                    b.Property<string>("Name");

                    b.Property<Guid>("OrganizationId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.ToTable("AugmentImages");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.AugmentObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<Guid>("AugmentImageId");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("OrganizationId");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AugmentImageId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.ToTable("AugmentObjects");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.AugmentObjectLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<Guid>("AugmentObjectId");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AugmentObjectId");

                    b.ToTable("AugmentObjectLocations");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.AugmentObjectMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<Guid?>("AudioId");

                    b.Property<Guid>("AugmentObjectId");

                    b.Property<Guid?>("AvatarId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MediaType");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<Guid?>("VideoId");

                    b.HasKey("Id");

                    b.HasIndex("AudioId");

                    b.HasIndex("AugmentObjectId")
                        .IsUnique();

                    b.HasIndex("AvatarId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("VideoId");

                    b.ToTable("AugmentObjectMedias");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.Avatar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("AvatarConfiguration")
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MimeType");

                    b.Property<string>("Name");

                    b.Property<Guid>("OrganizationId");

                    b.Property<string>("TextureFileName");

                    b.Property<string>("TextureFileUrl");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.ToTable("Avatars");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Address");

                    b.Property<string>("Code");

                    b.Property<string>("EmailAddress");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("Latitude");

                    b.Property<string>("LogoMimeType");

                    b.Property<string>("LogoName");

                    b.Property<string>("LogoUrl");

                    b.Property<double>("Longitude");

                    b.Property<string>("Name");

                    b.Property<int>("Type");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.Video", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MimeType");

                    b.Property<string>("Name");

                    b.Property<Guid>("OrganizationId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.Audio", b =>
                {
                    b.HasOne("Donde.Augmentor.Core.Domain.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.AugmentImage", b =>
                {
                    b.HasOne("Donde.Augmentor.Core.Domain.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.AugmentObject", b =>
                {
                    b.HasOne("Donde.Augmentor.Core.Domain.Models.AugmentImage", "AugmentImage")
                        .WithMany()
                        .HasForeignKey("AugmentImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Donde.Augmentor.Core.Domain.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.AugmentObjectLocation", b =>
                {
                    b.HasOne("Donde.Augmentor.Core.Domain.Models.AugmentObject", "AugmentObject")
                        .WithMany("AugmentObjectLocations")
                        .HasForeignKey("AugmentObjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.AugmentObjectMedia", b =>
                {
                    b.HasOne("Donde.Augmentor.Core.Domain.Models.Audio", "Audio")
                        .WithMany()
                        .HasForeignKey("AudioId");

                    b.HasOne("Donde.Augmentor.Core.Domain.Models.AugmentObject", "AugmentObject")
                        .WithMany("AugmentObjectMedias")
                        .HasForeignKey("AugmentObjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Donde.Augmentor.Core.Domain.Models.Avatar", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.HasOne("Donde.Augmentor.Core.Domain.Models.Video", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId");
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.Avatar", b =>
                {
                    b.HasOne("Donde.Augmentor.Core.Domain.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Donde.Augmentor.Core.Domain.Models.Video", b =>
                {
                    b.HasOne("Donde.Augmentor.Core.Domain.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
